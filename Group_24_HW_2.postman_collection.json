{
	"info": {
		"_postman_id": "6ac045c6-7f79-4653-a049-f23858cd734a",
		"name": "Group_24_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Point_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Check of the status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string\r",
							"pm.test(\"Check of the correct body\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": "{{url}}/first"
			},
			"response": []
		},
		{
			"name": "Point_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json\r",
							"var resJson = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(resJson.name).to.eql(\"Ekaterina\");\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(resJson.age).to.eql(\"25\");\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(+ (resJson.salary)).to.eql(2000);\r",
							"});\r",
							"\r",
							"//7. Спарсить request\r",
							"var reqJson = request.data;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name_res is name_req\", function () {\r",
							"    pm.expect(resJson.name).to.eql(reqJson.name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age_res is age_req\", function () {\r",
							"    pm.expect(resJson.age).to.eql(reqJson.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary_res is salary_req\", function () {\r",
							"    pm.expect(resJson.salary).to.eql(+ reqJson.salary);\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response\r",
							"console.log(\"family\",resJson.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(resJson.family.u_salary_1_5_year).to.eql(reqJson.salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ekaterina",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": "{{url}}/user_info_3"
			},
			"response": []
		},
		{
			"name": "Point_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json\r",
							"var resJson = pm.response.json();\r",
							"\r",
							"//4. Спарсить request\r",
							"var reqJson = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name_res is name_req\", function () {\r",
							"    pm.expect(resJson.name).to.eql(reqJson.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age_res is age_req\", function () {\r",
							"    pm.expect(resJson.age).to.eql(reqJson.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary_res is salary_req\", function () {\r",
							"    pm.expect(resJson.salary).to.eql(+ reqJson.salary);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response\r",
							"console.log(\"family\",resJson.family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"Property check_dog\", function () {\r",
							"    pm.expect(resJson.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"Property check_age\", function () {\r",
							"    pm.expect(resJson.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"Name is Luky\", function () {\r",
							"    pm.expect(resJson.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"Age is four\", function () {\r",
							"    pm.expect(resJson.family.pets.dog.age).to.eql(+ 4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Ekaterina&age=25&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ekaterina"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Point_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json\r",
							"var resJson = pm.response.json();\r",
							"\r",
							"//4. Спарсить request\r",
							"var reqJson = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name_res is name_req\", function () {\r",
							"    pm.expect(resJson.name).to.eql(reqJson.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age_res is age_req\", function () {\r",
							"    pm.expect(resJson.age).to.eql(+ (reqJson.age));\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request\r",
							"console.log(\"salary1\",reqJson.salary);\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response\r",
							"console.log(\"salary2\",resJson.salary);\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(\"salary3\",resJson.salary[0]);\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log(\"salary4\",resJson.salary[1]);\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log(\"salary5\",resJson.salary[2]);\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary_0 is salary_req\", function () {\r",
							"    pm.expect(resJson.salary[0]).to.eql(+ (reqJson.salary));\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_1 is salary_req\", function () {\r",
							"    pm.expect(+ (resJson.salary[1])).to.eql(reqJson.salary*2);\r",
							"});\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_2 is salary_req\", function () {\r",
							"    pm.expect(Number(resJson.salary[2])).to.eql(reqJson.salary*3);\r",
							"});\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", reqJson.name);\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", reqJson.age);\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", reqJson.salary);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"for (var salary_list of resJson.salary) {\r",
							"    console.log(salary_list);\r",
							"}; "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Ekaterina&age=25&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ekaterina"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Point_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json\r",
							"var resJson = pm.response.json ();\r",
							"\r",
							"//7. Спарсить request\r",
							"var reqJson = request.data;\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"resJson has start_qa_salary\", function () {\r",
							"    pm.expect(resJson).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"resJson has qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resJson).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"resJson has qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resJson).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"resJson has qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resJson).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"resJson has qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resJson).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"resJson has person\", function () {\r",
							"    pm.expect(resJson).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary_response is salary_request\", function () {\r",
							"    pm.expect(resJson.start_qa_salary).to.eql(+  (reqJson.salary));\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months is double_salary_request\", function () {\r",
							"    pm.expect(resJson.qa_salary_after_6_months).to.eql(reqJson.salary*2);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months is salary_2.7_request\", function () {\r",
							"    pm.expect(resJson.qa_salary_after_12_months).to.eql(reqJson.salary*2.7);\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year is salary_3.3_request\", function () {\r",
							"    pm.expect(resJson[\"qa_salary_after_1.5_year\"]).to.eql(reqJson.salary*3.3);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years is salary_3.8_request\"), function () {\r",
							"    pm.expect(resJson[\"qa_salary_after_3.5_years\"]).to.eql(reqJson.salary*3.8);\r",
							"};\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name_salary\"), function () {\r",
							"    pm.expect(resJson.person.u_name[1]).to.eql(reqJson.salary);\r",
							"};\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age_response is u_age_request\"), function () {\r",
							"    pm.expect(resJson.person.u_age).to.eql(reqJson.age);\r",
							"};\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years_response is salary_4.2_request\"), function () {\r",
							"    pm.expect(resJson.person.u_salary_5_years).to.eql(reqJson.salary*4.2);\r",
							"};\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"for (var u_name_list of resJson.person.u_name) {\r",
							"    console.log(u_name_list);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": "{{url}}/user_info_2"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}